import { Component, OnInit } from '@angular/core';
import { BuyerService, Buyer } from '../../services/buyer.service';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-buyer-list',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  template: `
    <h2>–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π</h2>
    <div class="form-container" *ngIf="isAdmin">
      <form [formGroup]="form" (ngSubmit)="onSubmit()">
        <input formControlName="fullName" placeholder="–§–ò–û" required />
        <input formControlName="email" placeholder="Email" />
        <input formControlName="phone" placeholder="–¢–µ–ª–µ—Ñ–æ–Ω" />
        <input formControlName="address" placeholder="–ê–¥—Ä–µ—Å" />
        <button type="submit" [disabled]="form.invalid">
          {{ editingBuyer ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å' }}
        </button>
        <button type="button" *ngIf="editingBuyer" (click)="cancelEdit()">–û—Ç–º–µ–Ω–∞</button>
      </form>
    </div>

    <table>
      <thead>
        <tr>
          <th>–§–ò–û</th>
          <th>Email</th>
          <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
          <th>–ê–¥—Ä–µ—Å</th>
          <th *ngIf="isAdmin">–î–µ–π—Å—Ç–≤–∏—è</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let buyer of buyers">
          <td>{{ buyer.fullName }}</td>
          <td>{{ buyer.email }}</td>
          <td>{{ buyer.phone }}</td>
          <td>{{ buyer.address }}</td>
          <td *ngIf="isAdmin">
            <button (click)="startEdit(buyer)">‚úèÔ∏è</button>
            <button (click)="deleteBuyer(buyer)">üóëÔ∏è</button>
          </td>
        </tr>
      </tbody>
    </table>
  `,
  styles: [`
    form {
      margin-bottom: 20px;
      display: flex;
      gap: 8px;
    }
    input {
      padding: 4px;
      flex: 1;
    }
    table {
      width: 100%;
      border-collapse: collapse;
    }
    th, td {
      border: 1px solid #ccc;
      padding: 8px;
    }
    th {
      background: #eee;
    }
    .form-container {
      position: sticky;
      top: 0;
      background: white;
      padding: 10px 0;
      z-index: 1000;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
  `]
})
export class BuyerListComponent implements OnInit {
  buyers: Buyer[] = [];
  form: FormGroup;
  editingBuyer: Buyer | null = null;

  // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è, —É–∫–∞–∑—ã–≤–∞—é—â–∞—è, –∞–¥–º–∏–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  isAdmin = false;

  constructor(private buyerService: BuyerService, private fb: FormBuilder) {
    this.form = this.fb.group({
      fullName: ['', Validators.required],
      email: [''],
      phone: [''],
      address: ['']
    });
  }

  ngOnInit() {
    // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    // –ù–∏–∂–µ –ø—Ä–∏–º–µ—Ä: this.isAdmin = authService.isUserAdmin();
    // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ —Å—Ç–∞–≤–∏–º true:
    this.isAdmin = this.checkIfUserIsAdmin();

    this.loadBuyers();
  }

  checkIfUserIsAdmin(): boolean {
    // TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ authService –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    // –ü—Ä–∏–º–µ—Ä: return this.authService.currentUserValue?.roles.includes('ADMIN');
    return false; // –ü–æ–∫–∞ false, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–Ω–æ–ø–æ–∫
  }

  loadBuyers() {
    this.buyerService.getAll().subscribe(data => {
      this.buyers = data.sort((a, b) => a.fullName.localeCompare(b.fullName));
    });
  }

  onSubmit() {
    if (!this.form.valid) return;

    if (this.editingBuyer) {
      const updated = { ...this.editingBuyer, ...this.form.value };
      this.buyerService.update(this.editingBuyer.id, updated).subscribe(() => {
        this.loadBuyers();
        this.cancelEdit();
      });
    } else {
      this.buyerService.create(this.form.value).subscribe(() => {
        this.loadBuyers();
        this.form.reset();
      });
    }
  }

  startEdit(buyer: Buyer) {
    this.editingBuyer = buyer;
    this.form.patchValue(buyer);
  }

  cancelEdit() {
    this.editingBuyer = null;
    this.form.reset();
  }

  deleteBuyer(buyer: Buyer) {
    if (confirm(`–£–¥–∞–ª–∏—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è ${buyer.fullName}?`)) {
      this.buyerService.delete(buyer.id).subscribe(() => this.loadBuyers());
    }
  }
}
