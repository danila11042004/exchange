import { Component, OnInit } from '@angular/core';
import { ShareService, Share } from '../../services/share.service';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { AuthService } from '../../services/auth.service';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-share-list',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule, FormsModule],
  template: `
    <h2>–°–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π</h2>

    <div style="margin-bottom: 10px;">
      <label>–ü–æ–∏—Å–∫ –ø–æ:
        <select [(ngModel)]="filterField">
          <option value="companyName">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏</option>
          <option value="companyAddress">–ê–¥—Ä–µ—Å</option>
          <option value="price">–¶–µ–Ω–∞</option>
          <option value="quantityAvailable">–î–æ—Å—Ç—É–ø–Ω–æ</option>
          <option value="controlStakeSize">–ö–æ–Ω—Ç—Ä. –ø–∞–∫–µ—Ç</option>
        </select>
      </label>
      <input [(ngModel)]="filterValue" placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞" />
    </div>

    <div class="form-container" *ngIf="isAdmin">
      <form [formGroup]="form" (ngSubmit)="onSubmit()">
        <input formControlName="companyName" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏" required />
        <input formControlName="companyAddress" placeholder="–ê–¥—Ä–µ—Å" />

        <input
          formControlName="price"
          placeholder="–¶–µ–Ω–∞ (–±–æ–ª—å—à–µ 0)"
          type="number"
          min="1"
          (input)="onNumberInput('price')"
          (keydown)="onKeyDownNoMinus($event)" />

        <input
          formControlName="quantityAvailable"
          placeholder="–î–æ—Å—Ç—É–ø–Ω–æ (–±–æ–ª—å—à–µ 0)"
          type="number"
          min="1"
          (input)="onNumberInput('quantityAvailable')"
          (keydown)="onKeyDownNoMinus($event)" />

        <input
          formControlName="controlStakeSize"
          placeholder="–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç (%)"
          type="number"
          min="1"
          max="100"
          (input)="onNumberInput('controlStakeSize')"
          (keydown)="onKeyDownNoMinus($event)" />

        <button type="submit" [disabled]="form.invalid">
          {{ editingShare ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å' }}
        </button>
        <button type="button" *ngIf="editingShare" (click)="cancelEdit()">–û—Ç–º–µ–Ω–∞</button>
      </form>
    </div>

    <table>
      <thead>
        <tr>
          <th>–ö–æ–º–ø–∞–Ω–∏—è</th>
          <th>–ê–¥—Ä–µ—Å</th>
          <th>–¶–µ–Ω–∞</th>
          <th>–î–æ—Å—Ç—É–ø–Ω–æ</th>
          <th>–ö–æ–Ω—Ç—Ä. –ø–∞–∫–µ—Ç</th>
          <th *ngIf="isAdmin">–î–µ–π—Å—Ç–≤–∏—è</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let share of filteredShares()">
          <td>{{ share.companyName }}</td>
          <td>{{ share.companyAddress }}</td>
          <td>{{ share.price | number:'1.2-2' }}</td>
          <td>{{ share.quantityAvailable }}</td>
          <td>{{ share.controlStakeSize }}%</td>
          <td *ngIf="isAdmin">
            <button (click)="startEdit(share)">‚úèÔ∏è</button>
            <button (click)="deleteShare(share)">üóëÔ∏è</button>
          </td>
        </tr>
      </tbody>
    </table>
  `,
  styles: [`
    .form-container {
      position: sticky;
      top: 0;
      background: white;
      padding: 10px 0;
      z-index: 1000;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    form {
      display: flex;
      gap: 8px;
      margin-bottom: 20px;
      flex-wrap: wrap;
    }
    input, select {
      padding: 4px;
      flex: 1 1 180px;
    }
    table {
      width: 100%;
      border-collapse: collapse;
    }
    th, td {
      padding: 8px;
      border: 1px solid #ddd;
    }
    th {
      background-color: #f2f2f2;
    }
  `]
})
export class ShareListComponent implements OnInit {
  shares: Share[] = [];
  form: FormGroup;
  editingShare: Share | null = null;
  isAdmin = false;

  // –ø–æ–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
  filterField: keyof Share = 'companyName';
  filterValue: string = '';

  constructor(
    private shareService: ShareService,
    private fb: FormBuilder,
    private authService: AuthService
  ) {
    this.form = this.fb.group({
      companyName: ['', Validators.required],
      companyAddress: [''],
      price: ['', [Validators.required, Validators.min(1)]],
      quantityAvailable: ['', [Validators.required, Validators.min(1)]],
      controlStakeSize: ['', [Validators.required, Validators.min(1), Validators.max(100)]]
    });
  }

  ngOnInit() {
    this.authService.isAdmin$.subscribe(status => this.isAdmin = status);
    this.loadShares();
  }

  loadShares() {
    this.shareService.getAll().subscribe(data => {
      this.shares = data.sort((a, b) => a.companyName.localeCompare(b.companyName));
    });
  }

  filteredShares(): Share[] {
    if (!this.filterValue.trim()) {
      return this.shares;
    }

    const value = this.filterValue.toLowerCase();

    return this.shares.filter(share => {
      const field = share[this.filterField];
      return field !== null && field !== undefined && field.toString().toLowerCase().includes(value);
    });
  }

  onKeyDownNoMinus(event: KeyboardEvent) {
    if (event.key === '-') {
      event.preventDefault();
    }
  }

  onNumberInput(controlName: string) {
    let value = this.form.controls[controlName].value;

    if (value !== null && value !== '' && (+value <= 0)) {
      this.form.controls[controlName].setValue('');
    }
  }

  onSubmit() {
    const companyName = this.form.controls['companyName'].value;
    const price = this.form.controls['price'].value;
    const quantityAvailable = this.form.controls['quantityAvailable'].value;
    const controlStakeSize = this.form.controls['controlStakeSize'].value;
    const companyAddress = this.form.controls['companyAddress'].value;

    if (!companyName || companyName.trim().length === 0) {
      alert('–ü–æ–ª–µ "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã');
      return;
    }

    if (companyAddress !== null && companyAddress !== '' && companyAddress.trim().length === 0) {
      alert('–ü–æ–ª–µ "–ê–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏" –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã');
      return;
    }

    if (price === null || price === '' || +price <= 0) {
      alert('–ü–æ–ª–µ "–¶–µ–Ω–∞" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
      return;
    }

    if (quantityAvailable === null || quantityAvailable === '' || +quantityAvailable <= 0) {
      alert('–ü–æ–ª–µ "–î–æ—Å—Ç—É–ø–Ω–æ" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
      return;
    }

    if (controlStakeSize !== null && controlStakeSize !== '') {
      if (+controlStakeSize < 0 || +controlStakeSize > 100) {
        alert('–ü–æ–ª–µ "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç" –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 100');
        return;
      }
    }

    if (this.form.invalid) return;

    if (this.editingShare) {
      const updated = { ...this.editingShare, ...this.form.value };
      this.shareService.update(this.editingShare.id, updated).subscribe(() => {
        this.loadShares();
        this.cancelEdit();
      });
    } else {
      this.shareService.create(this.form.value).subscribe(() => {
        this.loadShares();
        this.form.reset();
      });
    }
  }

  startEdit(share: Share) {
    this.editingShare = share;
    this.form.patchValue(share);
  }

  cancelEdit() {
    this.editingShare = null;
    this.form.reset();
  }

  deleteShare(share: Share) {
    if (confirm(`–£–¥–∞–ª–∏—Ç—å –∞–∫—Ü–∏—é –∫–æ–º–ø–∞–Ω–∏–∏ "${share.companyName}"?`)) {
      this.shareService.delete(share.id).subscribe(() => this.loadShares());
    }
  }
}
